import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

VACANCIES, QUESTIONS, FINAL = range(3)

vacancies = {
    "üîß –°–±–æ—Ä—â–∏–∫": "–†–∞–±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç—å.",
    "üì¶ –ö–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫": "–†–∞–±–æ—Ç–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ. –£–ø–∞–∫–æ–≤–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.",
    "üöö –ö—É—Ä—å–µ—Ä": "–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –≥–æ—Ä–æ–¥—É. –ñ–µ–ª–∞—Ç–µ–ª–µ–Ω –ª–∏—á–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç.",
    "üßπ –£–±–æ—Ä—â–∏–∫": "–£–±–æ—Ä–∫–∞ –æ—Ñ–∏—Å–æ–≤ –∏ –ø–æ–º–µ—â–µ–Ω–∏–π. –ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫."
}

questions = [
    "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
    "–ï—Å—Ç—å –ª–∏ –æ–ø—ã—Ç –ø–æ —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏?",
    "–ì–æ—Ç–æ–≤—ã –ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–æ—á–Ω—É—é —Å–º–µ–Ω—É?",
    "–ú–æ–∂–µ—Ç–µ –ª–∏ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è?"
]

user_data_store = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [[k] for k in vacancies.keys()]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)
    return VACANCIES

async def choose_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    vacancy = update.message.text
    context.user_data['vacancy'] = vacancy
    await update.message.reply_text(
    f"{vacancy}:\n{vacancies[vacancy]}\n\n–ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤–∞–º —ç—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è? (–î–∞/–ù–µ—Ç)"
)
    return QUESTIONS

async def ask_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() != "–¥–∞":
        await update.message.reply_text("–•–æ—Ä–æ—à–æ. –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≤–∞–∫–∞–Ω—Å–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return ConversationHandler.END

    context.user_data['answers'] = []
    context.user_data['q_index'] = 0
    await update.message.reply_text(questions[0])
    return FINAL

async def collect_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    context.user_data['answers'].append(answer)

    # –û—Ç—Å–µ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    if context.user_data['q_index'] == 0:
        try:
            if int(answer) < 18:
                await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É.")
                return ConversationHandler.END
        except:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
            return FINAL

    context.user_data['q_index'] += 1
    if context.user_data['q_index'] < len(questions):
        await update.message.reply_text(questions[context.user_data['q_index']])
        return FINAL
    else:
        summary = "\n".join(
            f"{questions[i]} {ans}" for i, ans in enumerate(context.user_data['answers'])
        )
        await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!\n\n–í–∞–∫–∞–Ω—Å–∏—è: {context.user_data['vacancy']}\n{summary}\n\n–ú—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    return ConversationHandler.END

if __name__ == '__main__':
    token = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            VACANCIES: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_vacancy)],
            QUESTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_questions)],
            FINAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_answers)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()
